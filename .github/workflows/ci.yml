name: CI/CD Pipeline

on:
#   push:
#     branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '22'
  PHP_VERSION: '8.4'
  # Enable parallel job execution
  FORCE_COLOR: 1

jobs:
  # Frontend React TypeScript Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Create frontend environment file
      run: cp .env.example .env

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    # Run linting, type-check, tests, and build in parallel using npm-run-all or separate steps
    - name: Run code quality checks
      run: |
        # Run ESLint and TypeScript check in parallel
        npm run lint &
        npm run type-check &
        wait  # Wait for both to complete

    - name: Run tests and build
      run: |
        # Run tests and build in parallel
        npm run test:ci &
        npm run build &
        wait  # Wait for both to complete

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Backend Laravel PHP Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv
        coverage: none  # Disable Xdebug for faster execution
        tools: composer:v2

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies (with dev for testing)
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Configure testing environment
      run: |
        echo "OPENAI_API_KEY=dummy_key_for_testing" >> .env
        echo "REVERB_APP_ID=meeting-audio-studio" >> .env
        echo "REVERB_APP_KEY=local" >> .env
        echo "REVERB_APP_SECRET=local" >> .env
        echo "REVERB_HOST=localhost" >> .env
        echo "REVERB_PORT=8081" >> .env
        echo "REVERB_SCHEME=http" >> .env

    - name: Set up database
      run: |
        php artisan config:cache
        php artisan migrate --force
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: postgres

    - name: Run tests
      run: |
        # Try artisan test first, fallback to PHPUnit directly
        if php artisan test --help >/dev/null 2>&1; then
          php artisan test
        else
          echo "Using PHPUnit directly..."
          ./vendor/bin/phpunit
        fi
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: postgres

    # Remove coverage upload for faster execution - enable only when needed
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: ./backend/coverage.xml
    #     flags: backend
    #     name: backend-coverage

  # Security Scanning - run in parallel with other jobs
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Display security scan results (for PRs)
      if: always() && github.event_name == 'pull_request'
      run: |
        echo "Security scan completed for pull request"
        if [ -f trivy-results.sarif ]; then
          echo "SARIF results generated successfully"
          # You can add commands here to parse and display results
        else
          echo "No SARIF results file found"
        fi

  # Docker Build Test - only run after core tests pass (skip for hotfix branches)
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: success() && !startsWith(github.ref_name, 'hotfix/')  # Only run if previous jobs succeed and not a hotfix branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Use BuildKit cache mounts for faster builds
    - name: Build and test Docker images
      run: |
        # Create env files
        cp backend/.env.example backend/.env
        cp frontend/.env.example frontend/.env

        # Build images in parallel using BuildKit
        docker buildx build \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --load \
          -t meeting-audio-studio-frontend:test \
          ./frontend &

        docker buildx build \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --load \
          -t meeting-audio-studio-backend:test \
          ./backend &

        wait  # Wait for both builds to complete

        # Quick compose config test
        docker compose config >/dev/null
      env:
        DB_CONNECTION: pgsql
        DB_HOST: postgres
        DB_PORT: 5432
        DB_DATABASE: meeting_audio_studio
        DB_USERNAME: postgres
        DB_PASSWORD: password
        REDIS_HOST: redis
        REDIS_PORT: 6379
        OPENAI_API_KEY: dummy_key_for_testing
        REVERB_APP_ID: meeting-audio-studio
        REVERB_APP_KEY: local
        REVERB_APP_SECRET: local
        REVERB_HOST: localhost
        REVERB_PORT: 8081
        REVERB_SCHEME: http

    - name: Cleanup
      if: always()
      run: docker compose down -v --remove-orphans

  # Notification - simplified
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan, docker-build]
    if: always()

    steps:
    - name: Notify results
      run: |
        # Check if Docker build was skipped (hotfix branch)
        if [[ "${{ startsWith(github.ref_name, 'hotfix/') }}" == "true" ]]; then
          echo "Hotfix branch - Docker build skipped"
          if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" ]]; then
            echo "All required tests passed for hotfix!"
          else
            echo "Some tests failed!"
          fi
        else
          if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "All tests passed!"
          else
            echo "Some tests failed!"
          fi
        fi
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "Backend: ${{ needs.backend-tests.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"

  # Integration Tests - simplified and faster (skip for hotfix branches)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !startsWith(github.ref_name, 'hotfix/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Quick integration test
      run: |
        # Create env files
        cp backend/.env.example backend/.env
        cp frontend/.env.example frontend/.env

        # Start services with faster startup
        docker compose up -d --quiet-pull

        # Shorter wait time with health checks
        echo "Waiting for services..."
        sleep 20

        # Quick health check
        timeout 60 bash -c 'until curl -f -s http://localhost:8000/api/health; do sleep 2; done' || {
          echo "Services failed to start, checking logs..."
          docker compose logs --tail=10
          exit 1
        }

        echo "Integration test passed"

    - name: Cleanup
      if: always()
      run: docker compose down -v

  # Deployment (only on master branch, skip for hotfix branches)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !startsWith(github.ref_name, 'hotfix/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create environment files
      run: |
        cp backend/.env.example backend/.env
        cp frontend/.env.example frontend/.env

    - name: Deploy to production
      run: |
        echo "Deployment steps would go here"
        # Add your deployment commands here
        # For example: deploy to cloud provider, update containers, etc.
