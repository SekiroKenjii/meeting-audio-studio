name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '22'
  PHP_VERSION: '8.4'

jobs:
  # Frontend React TypeScript Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Create frontend environment file
      run: cp .env.example .env

    - name: Install dependencies
      run: npm install

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run type-check

    - name: Run tests
      run: npm run test:ci

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Backend Laravel PHP Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.json') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Configure testing environment
      run: |
        echo "OPENAI_API_KEY=dummy_key_for_testing" >> .env
        echo "REVERB_APP_ID=meeting-audio-studio" >> .env
        echo "REVERB_APP_KEY=local" >> .env
        echo "REVERB_APP_SECRET=local" >> .env
        echo "REVERB_HOST=localhost" >> .env
        echo "REVERB_PORT=8081" >> .env
        echo "REVERB_SCHEME=http" >> .env

    - name: Set up database
      run: |
        php artisan config:cache
        php artisan migrate --force
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: postgres

    - name: Run PHPUnit tests
      run: php artisan test --coverage-clover coverage.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Display security scan results (for PRs)
      if: always() && github.event_name == 'pull_request'
      run: |
        echo "Security scan completed for pull request"
        if [ -f trivy-results.sarif ]; then
          echo "SARIF results generated successfully"
          # You can add commands here to parse and display results
        else
          echo "No SARIF results file found"
        fi

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create backend environment file
      run: cp backend/.env.example backend/.env

    - name: Create frontend environment file
      run: cp frontend/.env.example frontend/.env

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: meeting-audio-studio-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: meeting-audio-studio-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker Compose build
      run: |
        docker compose -f docker-compose.yml config
        docker compose -f docker-compose.yml build --no-cache
      env:
        DB_CONNECTION: pgsql
        DB_HOST: postgres
        DB_PORT: 5432
        DB_DATABASE: meeting_audio_studio
        DB_USERNAME: postgres
        DB_PASSWORD: password
        REDIS_HOST: redis
        REDIS_PORT: 6379
        OPENAI_API_KEY: dummy_key_for_testing
        REVERB_APP_ID: meeting-audio-studio
        REVERB_APP_KEY: local
        REVERB_APP_SECRET: local
        REVERB_HOST: localhost
        REVERB_PORT: 8081
        REVERB_SCHEME: http

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create backend environment file
      run: cp backend/.env.example backend/.env

    - name: Create frontend environment file
      run: cp frontend/.env.example frontend/.env

    - name: Start services with Docker Compose
      run: |
        docker compose up -d
        sleep 30  # Wait for services to be ready
      env:
        DB_CONNECTION: pgsql
        DB_HOST: postgres
        DB_PORT: 5432
        DB_DATABASE: meeting_audio_studio
        DB_USERNAME: postgres
        DB_PASSWORD: password
        REDIS_HOST: redis
        REDIS_PORT: 6379
        OPENAI_API_KEY: dummy_key_for_testing
        REVERB_APP_ID: meeting-audio-studio
        REVERB_APP_KEY: local
        REVERB_APP_SECRET: local
        REVERB_HOST: localhost
        REVERB_PORT: 8081
        REVERB_SCHEME: http

    - name: Wait for services to be healthy
      run: |
        # Wait for backend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'
        # Wait for audio processing service to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Add your integration test commands here
        echo "Integration tests would run here"

    - name: Cleanup
      if: always()
      run: docker compose down -v

  # Deployment (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create environment files
      run: |
        cp backend/.env.example backend/.env
        cp frontend/.env.example frontend/.env

    - name: Deploy to production
      run: |
        echo "Deployment steps would go here"
        # Add your deployment commands here
        # For example: deploy to cloud provider, update containers, etc.

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan, docker-build]
    if: always()

    steps:
    - name: Notify on success
      if: needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success'
      run: echo "All tests passed!"

    - name: Notify on failure
      if: needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure'
      run: echo "Some tests failed!"
