name: Hotfix Branch CI

on:
  push:
    branches: [ 'hotfix/**' ]
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '22'
  PHP_VERSION: '8.4'
  FORCE_COLOR: 1

jobs:
  # Frontend React TypeScript Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Create frontend environment file
      run: cp .env.example .env

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run code quality checks
      run: |
        npm run lint &
        npm run type-check &
        wait

    - name: Run tests
      run: npm run test:ci

    - name: Build application
      run: npm run build

  # Backend Laravel PHP Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: meeting_audio_studio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, pgsql, zip, gd, curl, bcmath
        coverage: xdebug

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: backend/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Create backend environment file
      run: cp .env.example .env

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Generate application key
      run: php artisan key:generate

    - name: Run database migrations
      run: php artisan migrate

    - name: Run backend tests
      run: php artisan test

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

  # Final status notification
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: always()

    steps:
    - name: Notify results
      run: |
        echo "ðŸš€ Hotfix branch CI completed - Docker build skipped for faster execution"
        if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" ]]; then
          echo "All required tests passed for hotfix!"
        else
          echo "Some tests failed!"
        fi
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "Backend: ${{ needs.backend-tests.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker: Skipped (hotfix branch)"

  # Auto-create PR to master when hotfix is pushed
  auto-pr:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref_name, 'hotfix/') &&
      needs.frontend-tests.result == 'success' &&
      needs.backend-tests.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if PR already exists
        if gh pr view --json number > /dev/null 2>&1; then
          echo "PR already exists for this branch"
          gh pr view --json url,title,number | jq -r '"PR #" + (.number | tostring) + ": " + .title + " - " + .url'
        else
          # Create new PR with proper escaping
          cat > pr_body.md << 'EOF'
        ## Hotfix Pull Request

        **Branch**: `${{ github.ref_name }}`
        **Author**: @${{ github.actor }}

        ### Test Results
        - Frontend tests: Passed
        - Backend tests: Passed
        - Security scan: ${{ needs.security-scan.result == 'success' && 'Passed' || 'Check required' }}
        - Docker build: Skipped (hotfix branch)

        ### Hotfix Details
        Please describe the critical issue being fixed and the solution implemented.

        ### Checklist
        - [ ] Critical bug fix verified
        - [ ] No breaking changes introduced
        - [ ] Tests are passing
        - [ ] Ready for immediate deployment

        ### Deployment
        This hotfix is ready for immediate merge and deployment to production.

        This PR was automatically created by the Hotfix CI workflow
        EOF

          gh pr create \
            --base master \
            --title "Hotfix: ${{ github.ref_name }}" \
            --body-file pr_body.md

          echo "Pull Request created successfully!"
        fi
